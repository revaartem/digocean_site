1. Create manager app.
2. Create 'templates' folder in manager app folder.
3. In templates\ create {name_of_form}.html.
4. In {name_of_form}.html write the html code of the page, where must be showing information from database.
   To be correct, you must extend your source html file by this html. So, in the top of it you must write
   {% extends '{source_file_name}.html' %}

        {% block {name_of_block(in the {source_file_name}.html)} %}

        /// Here you write the html code of the page ///

        {% endblock %}


5. Create file 'urls.py' in manager\.
6. Here we write:

    from django.urls import path
    from .views import reservation_list <---------- This is function, that must be written in manager\views.py

    app_name = 'manager'

    urlpatterns = [
        path('reservations\', reservation_list),
        ]

7. Going to manager\views.py.
    Write below:

    def reservation_list(request):
    pass

8. Going to {name_of_project}\urls.py.
   To variable 'urlpatterns' add the following lines:

   path('manager\', include('manager.urls')),

9. Get back to the manager\views.py.
    Write next function:

    from main_page.models import UserReservation <-------- Model of form, where user put his information and send it to our database.

    def reservation_list(request):
    lst = UserReservation.objects.filter(is_processed=False) <------ Here we get all applications with marker False in 'is_processed' variable.
    return render(request, 'reservations_list.html', context={
        'lst': lst <----- The name, that we use in {name_of_form}.html. With this we use iteration (for) and show to customer all unprocessed applications.
    })

10. In next step we need to add one button, that will change False on True in 'is_processed' variable. This button will send a request, after which we will go to the 'next' page.
    Here is some description, to understand this task more clearly.

    In file '{name_of_form}.html' we can have next lines:

    <a href="{% url 'manager:update_reserve' pk=item.pk %}">

    Where:
    manager: <----- Name of the app, we are working with (We write this in variable 'app_name' in manager\urls.py)
    update_reserve <----- path with name 'update_reserve'
    pk=item.pk <----- As parameter we will have primary key on this application.

11. Going to manager\urls.py

    Add to urlpatterns:

    path('reservations/update/<int:pk>', update_reservation, name='update_reserve')

    Where:
    reservations/update/<int:pk> <----- If we have this path in our browser url-line - we get in this 'path'.
    update_reservation <----- Function that will work in this path.
    name='update_reserve' <----- We assign a name to this path. We need it, because we use this in 10 pt. When we use constructions like this, it makes our code more flexible and correct.

12. Going to manager\views.py

    Creating function 'update_reservation' (we need it, because we currently use it in previous step).

    def update_reservation(request, pk):
    UserReservation.objects.filter(pk=pk).update(is_processed=True)
    return redirect('manager:reservations_list')

    Where:
    request, pk <----- request from user and primary key that we got as parameter in 11 pt.
    UserReservation.objects.filter(pk=pk).update(is_processed=True) <----- We update variable of object with concretely primary key, changing from False to True.
    return redirect('manager:reservations_list') <----- Redirect user(manager) back to list with applications.

13. Back to manager\urls.py.

    Add to first variable parameter 'name' with name, that we identified in return of function from 12 pt.

    path('reservations/', reservation_list, name='reservations_list')

14. Run project.
    In browser write path:

    http://127.0.0.1:8000/manager/reservations/

    All must work.
