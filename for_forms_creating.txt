1. In directory {your_app} create file forms.py.
2. In this file create class:

    from django import forms

    class {form_name}Form(forms.{ModelForm or Form}):
    pass

    Where:
    ModelForm - write and get information from database (registration, send form to the site or somthing like that)
    Form - only get information from database, can't write to it.

3. In {app_name}\models.py create new class:

    class {form_name}(model.Model):

    /Here we need to write all form fields as variable and set type of the field in every case./

    name = models.CharField(max_length=50) <----- Example
    message = models.TextField(max_length=250, blank=True) <----- Example
    is_processed = models.BooleanField(default=False) <----- Example

    Next we need to create class Meta and reassign __str__ function.

4. Start manage.py, 'makemirations' and 'migrate'
5. Go to {app_name}/admin.py.

    Register our model in admin.py, and now we can see our model on admin page.

6. We need to separate work of our 'view' function({app_name}\view.py), because when we want to write something to database - it's POST request.
   To do this, we need to add next lines to our function:

   if request.method == 'POST': <----- Check our request for type
       reservation = {form_name}Form(request.POST) <----- Set POST method to the form.
       if reservation.is_valid(): <----- If information in the form can be written to the database, we're doing next lines.
           reservation.save() <----- Save information from form to database.
           return redirect('/') <----- Redirect user to the main page (in this case, we can set any way in brackets)

   Below in this function we need to add one variable, that will create instance of class {form_name}Form.

   reservation = {form_name}Form()

   In dictionary, which applies to 'context' parameter, when we /return render(..., ..., context={data.dict})/ we need to add next:

   'reservation_form': reservation,

7. In {app_name}\forms.py create class Meta with variables that match every field in form:

    class Meta:
    model = {form_name} (In models.py)
    fields = ('name', 'email', 'phone', 'date_reservation', 'time_reservation', 'persons', 'message') <----- Example

    In class {form_name}Form add variable, that will be named as strings in variable 'fields' in class Meta.
    This variable must contain the same requirements to the information in the field, as in our form model in models.py.
    That's because if requirements will be different, our database will newer write information inside itself, because
    what is normal by parameters in forms.py will newer agreed with parameters in models.py.

    Example:
    name = forms.CharField(
        max_length=50,
        widget=forms.TextInput(attrs={ (Here we will write attributes from html page) })

    message = forms.CharField(
        max_length=250,
        widget=forms.Textarea(attrs={ (Here we will write attributes from html page) })


    But first, we need to add one script part. On top of line <div class="row"> we need to write {% csrf_token %}. It responsibility for safety saving information in database.
    Secondary, we need to delete static action, that form doing when front-end developer gave to us template.

    In this line:
    <form action="forms/contact.php" method="post" role="form" class="php-email-form">

    Delete:
    action="forms/contact.php"

    And we got:
    <form method="post" role="form" class="php-email-form">

    How we need to write html attributes.

    <div class="col-lg-4 col-md-6 form-group">
              <input type="text" name="name" class="form-control" id="name" placeholder="Your Name" data-rule="minlen:4" data-msg="Please enter at least 4 chars">
              <div class="validate"></div>
            </div>

    In upper lines we need to choose tag <input> and write to the parameter 'attrs' all parameters, that <input> tag contain.
    It will look like this:
    type="text" -----> 'type': 'text'
    name="name" -----> 'name': 'name'
    class="form-control" -----> 'class': 'form--control'

8. In {name_of_form_block}.html we need to replace lines of code with tag <input> (that contains information about fields of our form)
   to our named variable fields (that we named in class Meta in file forms.py). Replace will be done with template language.

   <div class="col-lg-4 col-md-6 form-group">
              <input type="text" name="name" class="form-control" id="name" placeholder="Your Name" data-rule="minlen:4" data-msg="Please enter at least 4 chars">
              <div class="validate"></div>
            </div>

   Will turn into this:

   <div class="col-lg-4 col-md-6 form-group">
                    {{ reservation_form.name }}
                  <div class="validate"></div>
                </div>

9. That's it. If you do all correctly, it should work.

