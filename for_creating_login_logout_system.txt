Django as a framework already have authentication module, his name written in settings.py:

    INSTALLED_APPS = [
     ...
    'django.contrib.auth',
     ...]

1. Creating new app named 'account'. Registrate this app in settings.py.
2. In folder of the app account\ we're creating new file forms.py. Inside this file we write next:

    from django import forms <----- Form module to create class UserRegistration
    from django.contrib.auth import get_user_model <----- We CAN'T work with user's model directly, so we need to import this module to help us out

    User = get_user_model() <----- Creating model of User

    class UserRegistration(forms.ModelForm): <----- Creating class, that will help us to get user's data

    class Meta:
        model = User
        fields = ('username', ) <----- We can't store login and password in the same place (because of safety), so in this variable we will write only 'username'

        username = forms.CharField(widget=forms.TextInput())      |
        password = forms.CharField(widget=forms.PasswordInput())  | <----- That's will be our fields of user's registration
        password2 = forms.CharField(widget=forms.PasswordInput()) |

    Sometimes, we need to get clean data of user login and password (to authenticate user, for example). For this we need to
    create function 'clean'. Doing this at the same class in file forms.py.

        def clean_password2(self): <----- In this case we will check what we got in 'password2'.
                                          System will always call this function, when she will need to write 'password2' to database,
                                          and system will get 'password2' only the way if 'password' == 'password2'.

            data = self.cleaned_data <----- We get 'cleaned' information in dict-format from POST-request.

            if data.get('password') == data.get('password2'): <----- We check if the values are the same (password repeat must be the same, as origin password)
                return data['password2'] <----- Return password2
            raise forms.ValidationError('Error in passwords') <----- Error if validation failed.

3. Now we need to return our form to the user. Go to account\views.py:

    from forms import UserRegistration

    def registration_view(request):
        form = UserRegistration(request.POST or None) <----- Will create form on our page. If we have GET-request - form will be empty,
                                                             if we will have POST-request - information from form will be written in
                                                             database.
        if form.is_valid(): <----- If data in all fields is valid, doing next.
            new_user = form.save(commit=False) <----- We reserved in database ID number for our password and in next step we will try to write password to database with this reserved ID.
            new_user.set_password(form.cleaned_data['password']) <----- We try to write password to database with this reserved ID.
            new_user.save() <----- If all OK we saved information in database.
            return render(request, 'registration_done.html', context={'user': new_user}) <----- About this in next step.

        return render(request, 'registration.html', context={'form': form}) <----- About this in next step too.

4. In folder account\ create folder templates\ and create file 'registration.html' and 'registration_done.html'.

   In these files we need to write our html-code of the page, that must contains form fields and button 'Submit'.
   registration.html - 1:06:02
   registration_done.html - 1:06:53

5. Go to {project_name}\urls.py.

   Add next lines:
   from account.views import registration_view

   urlpatterns = [
       ...
       path('registration/', registration_view, name='registration_view'), <----- Add url path to registration page.
       ...]

6. On this stage we can go to our_site_url/registration/ and try register our user, all must work correctly.
7. Go to account\forms.py. Create new form - user login form.

   class UserLogin(forms.Form): <----- As parent class we use Form (only GET information from database, can't POST)

   username = forms.CharField(widget=forms.TextInput()) <----- User enter his login
   password = forms.CharField(widget=forms.PasswordInput()) <----- User enter his password

   def clean(self): <----- Here we get cleaned login and password from fields below.
       username = self.cleaned_data.get('username')
       password = self.cleaned_data.get('password')

       if username and password: <----- Check fields for empty
           user = authenticate(username=username, password=password) <----- Try to authenticate user in system.
           if not user or not user.check_password(password): <----- If login missing from the system or incorrect password, we're doing next.
               raise forms.ValidationError('Error in Login or Password')
       else:
           raise forms.ValidationError('Error in Login or Password')
       return super().clean()

8. After successful authorization we need to redirect user to page, that was before we go to the authorization page. Let's do it.
   Going to account\views.py and create function login_view

       from django.contrib.auth import login, authenticate

   def login_view(request):
       form = UserLogin(request.POST or None)
       next_get = request.GET.get('next') <----- Here we get dictionary from GET request, in this dict we get value from key 'next', this will be our path, when user finished registration.

       if form.is_valid():
           username = self.cleaned_data.get('username') <----- Get user's name from form
           password = self.cleaned_data.get('password') <----- Get user's password from form
           user = authenticate(username=username, password=password) <----- Try to authenticate user
           login(request, user) <----- Built-in function, that authorized user and say to the system - that user is log in.

           next_post = request.POST.get('next') <----- Here we get dictionary from POST request, in this dict we get value from key 'next', this will be our path, when user finished registration.
           return redirect(next_get or next_post or '/')

       return render(request, 'login.html', context:{'form': form}) <----- If we have GET-request, we re-direct user to login page. Page will create in next step.

9. In account\templates\ create login.html. In this file write html code of this page.
10. Going to {name_of_project}\urls.py.
    Add next lines:

    from account.views import registration_view, login_view

    urlpatterns += [
    ...
    path('login/', login_view, name='login_view'),
    ...]

11. Open browser, go to {our_site_url}/login. All must work, after logging in, if you go to the login page from about;blank,
    you must be redirected to main page ('/').

12. Creating logout solution.
    Go to account\views.py. Add next lines:

    from django.contrib.auth import login, authenticate, logout

    def logout_view(request):
    logout(request) <----- Built-in function, that logout user and say to the system - that user is log out from system.
    return redirect('/') <----- Redirect to main page.

13. Going to {name_of_project}\urls.py.
    Add next lines:

    from account.views import registration_view, login_view, logout_view

    urlpatterns += [
    ...
    path('logout/', logout_view, name='logout_view'), <----- Add url path to logout page.
    ...]

14. If we need to show any page ONLY for logged-in users, we can do next thing:

    In file views.py (any app) we import next:

    from django.contrib.auth.decorators import login_required

    Then decorate our view-function with this decorator.

    @login_required(login_url=/login/) <----- As parameter in this decorator we set path, where decorator must redirect user, if user not logged in system.
    def main(request):
    ...

15. If we want to get pass to the page only a certain group of people or somthing like that, we can use decorator @user_passes_test.
    Example:

    from django.contrib.auth.decorators import login_required, user_passes_test

    Then decorate our view-function with this decorator, but in this case we need to keep attention to the order of decorators.

    @login_required(login_url=/login/)
    @user_passes_test(is_manager) <----- as argument this decorator contain function that return True or False.
    def main(request):
    ...

    Let's write function to the decorator. We can write it at the same file below the decorated function.

    def is_manager(user): <----- As argument we contain our currently User model.
        return user.groups.filter(name='manager').exists() <----- Here we filter user's query set for a groups with name 'manager', and if user have at least one group with this parameter - function will return True.

16. To create group 'manager' we need go to admin panel, into tab authentication and authorization/groups/ and create new group with name 'manager'.
    Inside create page we can add some permissions to our group.

17. To add user to any group, we go to admin panel, into tab authentication and authorization/users/, choose any user and inside user
    settings add to user groups any group, 'manager' in our case.